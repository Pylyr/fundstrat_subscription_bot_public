# All the telegram related functionality is here

from telegram.ext import CommandHandler, CallbackQueryHandler
import logging
import time
from db import add_user, valid, get_expired_list, get_expiration
from payments import get_link, get_status
from global_init import API_TOKEN, TERMINAL, PRICE, GROUP_ID
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater
from babel.dates import format_datetime
DEBUG = False

updater = Updater(API_TOKEN, use_context=True)


def main_menu(update, context):
    id = update.effective_user.id
    paid = valid(id)
    if paid:
        context.bot.send_message(chat_id=id, text=purchased_message(id),
                                 reply_markup=main_menu_keyboard())
    else:
        context.bot.send_message(chat_id=id, text=not_purchased_message())
        purchase_subscription(update, context)


# def purchase_subscription(update, context) -> None:
#     chat_id = update.effective_user.id
#     title = "Confirm subscription"
#     description = "30 Day Subscription to something?"
#     payload = "Custom-Payload"
#     provider_token = PROVIDER_TOKEN
#     currency = "RUB"
#     price = 100
#     prices = [LabeledPrice("30 Day Subscription", price * 100)]
#     context.bot.send_invoice(
#         chat_id, title, description, payload, provider_token, currency, prices
#     )

# def precheckout_callback(update, context):
#     query = update.pre_checkout_query
#     if query.invoice_payload != 'Custom-Payload':
#         query.answer(ok=False, error_message="Something went wrong...")
#     else:
#         query.answer(ok=True)


# def successful_payment_callback(update, context):
#     id = update.effective_user.id
#     update.message.reply_text("Payment confirmed!")
#     updater.bot.unban_chat_member(chat_id=GROUP_ID,
#                                   user_id=id, only_if_banned=True)

#     add_user(id)
#     update.message.reply_text(purchased_message(id),
#                               reply_markup=main_menu_keyboard())

def purchase_subscription(update, context):
    id = update.effective_user.id
    order = f"{time.time()}/{id}"
    url, pid = get_link(TERMINAL, order, PRICE)
    context.bot.send_message(
        chat_id=id, text=payment_check(), reply_markup=payment_check_btn(url, pid))


def check_payment(update, context):
    id = update.effective_user.id
    args = update.callback_query.data.split()
    pid = args[1]
    status = get_status(TERMINAL, pid)
    message_id = update.callback_query.message.message_id
    chat_id = update.callback_query.message.chat.id
    if status == "CONFIRMED":
        context.bot.edit_message_text(
            chat_id=chat_id, message_id=message_id, text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

        updater.bot.unban_chat_member(chat_id=GROUP_ID,
                                      user_id=id, only_if_banned=True)
        add_user(id)
        context.bot.send_message(chat_id=id, text=purchased_message(id),
                                 reply_markup=main_menu_keyboard())
    elif status == "REJECTED":
        context.bot.edit_message_text(
            chat_id=chat_id, message_id=message_id, text="–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
    else:
        text = "–ü–æ—Ö–æ–∂–µ, –í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏... –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å!"
        if not update.callback_query.message.text == text:
            context.bot.edit_message_text(
                chat_id=chat_id, message_id=message_id,
                text=text,
                reply_markup=update.callback_query.message.reply_markup)


def cancel_payment(update, context):
    message_id = update.callback_query.message.message_id
    chat_id = update.callback_query.message.chat.id
    context.bot.edit_message_text(
        chat_id=chat_id, message_id=message_id, text="–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω–µ–Ω!")


def cancel_subscription_warning(update, context):
    context.bot.send_message(chat_id=update.effective_user.id,
                             text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É?",
                             reply_markup=cancel_menu())


def cancel_subscription(update, context):
    id = update.effective_user.id
    paid = valid(id)
    if paid:
        context.bot.send_message(chat_id=update.effective_user.id,
                                 text="–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        # ban_user(id)
        admin_members = updater.bot.get_chat_administrators(
            chat_id=GROUP_ID)
        admin_id = {member.user.id for member in admin_members}
        if id not in admin_id:
            updater.bot.ban_chat_member(chat_id=GROUP_ID, user_id=id)
    else:
        context.bot.send_message(chat_id=update.effective_user.id,
                                 text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –í–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")
    main_menu(update, context)


def error(update, context):
    print(f'Update {update} caused error {context.error}')


def ban():
    try:
        ban_list = get_expired_list()
        admin_members = updater.bot.get_chat_administrators(
            chat_id=GROUP_ID)
        admin_id = {str(member.user.id) for member in admin_members}
        for user_id in ban_list:
            if user_id not in admin_id:
                logging.info(f'Banned {user_id}')
                updater.bot.ban_chat_member(chat_id=GROUP_ID, user_id=user_id)
    except:
        logging.error(f'Ban Error')


############################ Keyboards #########################################

def main_menu_keyboard():
    channel_url = "https://t.me/+_P1FdBCSJhkwMDU0"
    help_url = "https://t.me/fundstratru"
    keyboard = [[InlineKeyboardButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É', callback_data='last', url=channel_url)],
                [InlineKeyboardButton('C–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ', url=help_url)]]
    # [InlineKeyboardButton('–ü—Ä–æ–¥–ª–∏—Ç—å –º–æ—é –ø–æ–¥–ø–∏—Å–∫—É', callback_data='renew')]
    if DEBUG:
        keyboard.append([InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –º–æ—é –ø–æ–¥–ø–∏—Å–∫—É',
                                              callback_data='cancel_warning')])
    return InlineKeyboardMarkup(keyboard)


def payment_check_btn(url, pid):
    keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å (C–ë–ü)", url=url)],
                [InlineKeyboardButton(
                    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂", callback_data=f"check_payment {pid}")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]]
    return InlineKeyboardMarkup(keyboard)


def cancel_menu():
    keyboard = [[InlineKeyboardButton("–î–∞", callback_data="cancel_subscription")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="menu")]]
    return InlineKeyboardMarkup(keyboard)


############################# Messages #########################################


def not_purchased_message():
    text = (
        "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –í–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    )
    return text


def payment_check():
    text = f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂'"

    return text


def purchased_message(id):
    expir_date = get_expiration(id)
    if not expir_date:
        return
    expir_str = format_datetime(expir_date, format="d MMM yyyy", locale='ru')
    text = ("‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç—ë–∂:\n"
            f"üìÖ {expir_str}")
    return text

############################# Handlers #########################################


dispatcher = updater.dispatcher
dispatcher.add_handler(CommandHandler('start', main_menu))
dispatcher.add_handler(CallbackQueryHandler(main_menu, pattern="menu"))
# dispatcher.add_handler(PreCheckoutQueryHandler(precheckout_callback))
# dispatcher.add_handler(MessageHandler(
#     Filters.successful_payment, successful_payment_callback))
dispatcher.add_handler(CallbackQueryHandler(
    check_payment, pattern="check_payment .*"))
dispatcher.add_handler(CallbackQueryHandler(
    cancel_payment, pattern="cancel_payment"))
dispatcher.add_handler(CallbackQueryHandler(
    cancel_subscription_warning, pattern="cancel_warning"))
dispatcher.add_handler(CallbackQueryHandler(
    cancel_subscription, pattern="cancel_subscription"))
dispatcher.add_error_handler(error)
